{"ast":null,"code":"var _jsxFileName = \"/Users/shreyashkiranchaudhari/Desktop/Projects/DSA-Zip/Github_Clone_website/Linkedin_Zip_Solver/live-website/src/components/ImageOCRInput.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from \"react\";\nimport Tesseract from \"tesseract.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction preprocessImage(file, callback) {\n  const img = new window.Image();\n  const reader = new FileReader();\n  reader.onload = function (e) {\n    img.src = e.target.result;\n    img.onload = function () {\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = img.width;\n      canvas.height = img.height;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(img, 0, 0);\n      // Convert to grayscale & increase contrast\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        const avg = (imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2]) / 3;\n        // Increase contrast\n        const contrast = 60; // Try 60-100 for more/less contrast\n        let v = avg < 128 ? avg - contrast : avg + contrast;\n        v = Math.max(0, Math.min(255, v));\n        imageData.data[i] = imageData.data[i + 1] = imageData.data[i + 2] = v;\n      }\n      ctx.putImageData(imageData, 0, 0);\n      canvas.toBlob(callback, \"image/png\");\n    };\n  };\n  reader.readAsDataURL(file);\n}\nexport default function ImageOCRInput({\n  onMatrixParsed\n}) {\n  _s();\n  const [ocrText, setOcrText] = useState(\"\");\n  const [processing, setProcessing] = useState(false);\n  const [progress, setProgress] = useState(0);\n  async function handleFile(e) {\n    const file = e.target.files[0];\n    if (!file) return;\n    setProcessing(true);\n    setOcrText(\"\");\n    setProgress(0);\n    preprocessImage(file, async blob => {\n      const {\n        data\n      } = await Tesseract.recognize(blob, \"eng\", {\n        logger: m => {\n          if (m.status === \"recognizing text\" && m.progress) setProgress(m.progress);\n        }\n      });\n      setOcrText(data.text);\n      setProcessing(false);\n      setProgress(1);\n    });\n  }\n  function handleApply() {\n    if (!ocrText.trim()) return;\n    onMatrixParsed(ocrText);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: \"16px 0\",\n      padding: \"16px\",\n      border: \"1px solid #eee\",\n      borderRadius: 8\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Upload Image for OCR\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: handleFile,\n      disabled: processing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), processing && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Processing image\\u2026\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100%\",\n          height: 8,\n          background: \"#eee\",\n          borderRadius: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: `${Math.round(progress * 100)}%`,\n            height: 8,\n            background: \"#1ec7f7\",\n            borderRadius: 4,\n            transition: \"width 0.2s\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), ocrText && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Extracted Text (edit if needed):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        style: {\n          width: \"100%\",\n          minHeight: 100,\n          fontFamily: \"monospace\"\n        },\n        value: ocrText,\n        onChange: e => setOcrText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleApply,\n        children: \"Apply to Puzzle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(ImageOCRInput, \"vuOm0KQ1rhRZSL1SFTrya2ixTaA=\");\n_c = ImageOCRInput;\nvar _c;\n$RefreshReg$(_c, \"ImageOCRInput\");","map":{"version":3,"names":["React","useRef","useState","Tesseract","jsxDEV","_jsxDEV","preprocessImage","file","callback","img","window","Image","reader","FileReader","onload","e","src","target","result","canvas","document","createElement","width","height","ctx","getContext","drawImage","imageData","getImageData","i","data","length","avg","contrast","v","Math","max","min","putImageData","toBlob","readAsDataURL","ImageOCRInput","onMatrixParsed","_s","ocrText","setOcrText","processing","setProcessing","progress","setProgress","handleFile","files","blob","recognize","logger","m","status","text","handleApply","trim","style","margin","padding","border","borderRadius","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","disabled","background","round","transition","minHeight","fontFamily","value","onClick","_c","$RefreshReg$"],"sources":["/Users/shreyashkiranchaudhari/Desktop/Projects/DSA-Zip/Github_Clone_website/Linkedin_Zip_Solver/live-website/src/components/ImageOCRInput.js"],"sourcesContent":["import React, { useRef, useState } from \"react\";\nimport Tesseract from \"tesseract.js\";\n\nfunction preprocessImage(file, callback) {\n  const img = new window.Image();\n  const reader = new FileReader();\n  reader.onload = function (e) {\n    img.src = e.target.result;\n    img.onload = function () {\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = img.width;\n      canvas.height = img.height;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(img, 0, 0);\n      // Convert to grayscale & increase contrast\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        const avg = (imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2]) / 3;\n        // Increase contrast\n        const contrast = 60; // Try 60-100 for more/less contrast\n        let v = avg < 128 ? avg - contrast : avg + contrast;\n        v = Math.max(0, Math.min(255, v));\n        imageData.data[i] = imageData.data[i + 1] = imageData.data[i + 2] = v;\n      }\n      ctx.putImageData(imageData, 0, 0);\n      canvas.toBlob(callback, \"image/png\");\n    };\n  };\n  reader.readAsDataURL(file);\n}\n\nexport default function ImageOCRInput({ onMatrixParsed }) {\n  const [ocrText, setOcrText] = useState(\"\");\n  const [processing, setProcessing] = useState(false);\n  const [progress, setProgress] = useState(0);\n\n  async function handleFile(e) {\n    const file = e.target.files[0];\n    if (!file) return;\n    setProcessing(true);\n    setOcrText(\"\");\n    setProgress(0);\n\n    preprocessImage(file, async (blob) => {\n      const { data } = await Tesseract.recognize(blob, \"eng\", {\n        logger: m => {\n          if (m.status === \"recognizing text\" && m.progress) setProgress(m.progress);\n        },\n      });\n      setOcrText(data.text);\n      setProcessing(false);\n      setProgress(1);\n    });\n  }\n\n  function handleApply() {\n    if (!ocrText.trim()) return;\n    onMatrixParsed(ocrText);\n  }\n\n  return (\n    <div style={{margin: \"16px 0\", padding: \"16px\", border: \"1px solid #eee\", borderRadius: 8}}>\n      <h4>Upload Image for OCR</h4>\n      <input\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={handleFile}\n        disabled={processing}\n      />\n      {processing && (\n        <div>\n          <div>Processing imageâ€¦</div>\n          <div style={{ width: \"100%\", height: 8, background: \"#eee\", borderRadius: 4 }}>\n            <div style={{\n              width: `${Math.round(progress * 100)}%`,\n              height: 8,\n              background: \"#1ec7f7\",\n              borderRadius: 4,\n              transition: \"width 0.2s\"\n            }} />\n          </div>\n        </div>\n      )}\n      {ocrText && (\n        <div>\n          <h5>Extracted Text (edit if needed):</h5>\n          <textarea\n            style={{width: \"100%\", minHeight: 100, fontFamily: \"monospace\"}}\n            value={ocrText}\n            onChange={e => setOcrText(e.target.value)}\n          />\n          <button onClick={handleApply}>Apply to Puzzle</button>\n        </div>\n      )}\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}