{"ast":null,"code":"import React,{useRef,useState}from'react';import Tesseract from'tesseract.js';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function parseMatrixFromText(text,m,n){// Remove all non-numeric and non-dash, split by whitespace\nconst nums=text.replace(/[^\\d\\- ]+/g,\" \").split(/\\s+/).filter(Boolean).map(Number);const matrix=[];let idx=0;for(let i=0;i<m;++i){const row=[];for(let j=0;j<n;++j){var _nums$idx;row.push((_nums$idx=nums[idx++])!==null&&_nums$idx!==void 0?_nums$idx:-1);}matrix.push(row);}return matrix;}// Infer wall matrices (1 = wall, 0 = open) from number matrix (numbers only, no image lines)\nfunction inferWalls(numbers){const m=numbers.length,n=numbers[0].length;const hWalls=Array.from({length:m},()=>Array(n).fill(0));const vWalls=Array.from({length:m},()=>Array(n).fill(0));for(let i=0;i<m;++i){for(let j=0;j<n-1;++j){// Horizontal: block if either cell is -1\nif(numbers[i][j]===-1||numbers[i][j+1]===-1)hWalls[i][j]=1;}}for(let j=0;j<n;++j){for(let i=0;i<m-1;++i){// Vertical: block if either cell is -1\nif(numbers[i][j]===-1||numbers[i+1][j]===-1)vWalls[i][j]=1;}}return{hWalls,vWalls};}export default function ImageUpload(_ref){let{onExtracted}=_ref;const fileInput=useRef(null);const[progress,setProgress]=useState('');const[m,setM]=useState('');const[n,setN]=useState('');const handleFile=async file=>{setProgress('Running OCR...');const{data}=await Tesseract.recognize(file,'eng',{logger:m=>setProgress(m.status+(m.progress?\" (\".concat(Math.round(m.progress*100),\"%)\"):''))});setProgress('Parsing matrix...');let rows=parseInt(m,10),cols=parseInt(n,10);if(!rows||!cols){setProgress('Please enter matrix size (rows and cols)');return;}const matrix=parseMatrixFromText(data.text,rows,cols);const{hWalls,vWalls}=inferWalls(matrix);setProgress('');onExtracted(matrix,hWalls,vWalls);};return/*#__PURE__*/_jsxs(\"div\",{style:{marginBottom:18},children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Step 1: Upload Puzzle Screenshot\"}),/*#__PURE__*/_jsxs(\"div\",{style:{marginBottom:6},children:[/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:m,min:1,onChange:e=>setM(e.target.value),placeholder:\"Rows (m)\",style:{width:90,marginRight:6}}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:n,min:1,onChange:e=>setN(e.target.value),placeholder:\"Cols (n)\",style:{width:90,marginRight:12}}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",accept:\"image/*\",ref:fileInput,onChange:e=>{var _e$target$files;if((_e$target$files=e.target.files)!==null&&_e$target$files!==void 0&&_e$target$files[0])handleFile(e.target.files[0]);}})]}),progress&&/*#__PURE__*/_jsx(\"div\",{style:{color:\"#1877f2\",margin:\"8px 0\"},children:progress}),/*#__PURE__*/_jsxs(\"div\",{style:{fontSize:\"0.95rem\",color:\"#666\",marginBottom:8},children:[/*#__PURE__*/_jsx(\"b\",{children:\"Tip:\"}),\" Crop your screenshot tightly around the grid. After extraction, review & adjust the detected grid below.\"]})]});}","map":{"version":3,"names":["React","useRef","useState","Tesseract","jsx","_jsx","jsxs","_jsxs","parseMatrixFromText","text","m","n","nums","replace","split","filter","Boolean","map","Number","matrix","idx","i","row","j","_nums$idx","push","inferWalls","numbers","length","hWalls","Array","from","fill","vWalls","ImageUpload","_ref","onExtracted","fileInput","progress","setProgress","setM","setN","handleFile","file","data","recognize","logger","status","concat","Math","round","rows","parseInt","cols","style","marginBottom","children","type","value","min","onChange","e","target","placeholder","width","marginRight","accept","ref","_e$target$files","files","color","margin","fontSize"],"sources":["/Users/shreyashkiranchaudhari/Desktop/Projects/DSA-Zip/Github_Clone_website/Linkedin_Zip_Solver/live-website/src/components/ImageUpload.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport Tesseract from 'tesseract.js';\n\nfunction parseMatrixFromText(text, m, n) {\n  // Remove all non-numeric and non-dash, split by whitespace\n  const nums = text\n    .replace(/[^\\d\\- ]+/g, \" \")\n    .split(/\\s+/)\n    .filter(Boolean)\n    .map(Number);\n  const matrix = [];\n  let idx = 0;\n  for (let i = 0; i < m; ++i) {\n    const row = [];\n    for (let j = 0; j < n; ++j) {\n      row.push(nums[idx++] ?? -1);\n    }\n    matrix.push(row);\n  }\n  return matrix;\n}\n\n// Infer wall matrices (1 = wall, 0 = open) from number matrix (numbers only, no image lines)\nfunction inferWalls(numbers) {\n  const m = numbers.length, n = numbers[0].length;\n  const hWalls = Array.from({ length: m }, () => Array(n).fill(0));\n  const vWalls = Array.from({ length: m }, () => Array(n).fill(0));\n  for (let i = 0; i < m; ++i) {\n    for (let j = 0; j < n - 1; ++j) {\n      // Horizontal: block if either cell is -1\n      if (numbers[i][j] === -1 || numbers[i][j + 1] === -1) hWalls[i][j] = 1;\n    }\n  }\n  for (let j = 0; j < n; ++j) {\n    for (let i = 0; i < m - 1; ++i) {\n      // Vertical: block if either cell is -1\n      if (numbers[i][j] === -1 || numbers[i + 1][j] === -1) vWalls[i][j] = 1;\n    }\n  }\n  return { hWalls, vWalls };\n}\n\nexport default function ImageUpload({ onExtracted }) {\n  const fileInput = useRef(null);\n  const [progress, setProgress] = useState('');\n  const [m, setM] = useState('');\n  const [n, setN] = useState('');\n\n  const handleFile = async (file) => {\n    setProgress('Running OCR...');\n    const { data } = await Tesseract.recognize(file, 'eng', {\n      logger: m => setProgress(m.status + (m.progress ? ` (${Math.round(m.progress * 100)}%)` : '')),\n    });\n    setProgress('Parsing matrix...');\n    let rows = parseInt(m, 10), cols = parseInt(n, 10);\n    if (!rows || !cols) {\n      setProgress('Please enter matrix size (rows and cols)');\n      return;\n    }\n    const matrix = parseMatrixFromText(data.text, rows, cols);\n    const { hWalls, vWalls } = inferWalls(matrix);\n    setProgress('');\n    onExtracted(matrix, hWalls, vWalls);\n  };\n\n  return (\n    <div style={{ marginBottom: 18 }}>\n      <h2>Step 1: Upload Puzzle Screenshot</h2>\n      <div style={{ marginBottom: 6 }}>\n        <input\n          type=\"number\"\n          value={m}\n          min={1}\n          onChange={e => setM(e.target.value)}\n          placeholder=\"Rows (m)\"\n          style={{ width: 90, marginRight: 6 }}\n        />\n        <input\n          type=\"number\"\n          value={n}\n          min={1}\n          onChange={e => setN(e.target.value)}\n          placeholder=\"Cols (n)\"\n          style={{ width: 90, marginRight: 12 }}\n        />\n        <input\n          type=\"file\"\n          accept=\"image/*\"\n          ref={fileInput}\n          onChange={e => {\n            if (e.target.files?.[0]) handleFile(e.target.files[0]);\n          }}\n        />\n      </div>\n      {progress && <div style={{ color: \"#1877f2\", margin: \"8px 0\" }}>{progress}</div>}\n      <div style={{ fontSize: \"0.95rem\", color: \"#666\", marginBottom: 8 }}>\n        <b>Tip:</b> Crop your screenshot tightly around the grid.  \n        After extraction, review & adjust the detected grid below.\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}