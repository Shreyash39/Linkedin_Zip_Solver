{"ast":null,"code":"var _jsxFileName = \"/Users/shreyashkiranchaudhari/Desktop/Projects/DSA-Zip/Github_Clone_website/Linkedin_Zip_Solver/live-website/src/components/ImageUpload.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport Tesseract from 'tesseract.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction parseMatrixFromText(text, m, n) {\n  // Remove all non-numeric and non-dash, split by whitespace\n  const nums = text.replace(/[^\\d\\- ]+/g, \" \").split(/\\s+/).filter(Boolean).map(Number);\n  const matrix = [];\n  let idx = 0;\n  for (let i = 0; i < m; ++i) {\n    const row = [];\n    for (let j = 0; j < n; ++j) {\n      var _nums$idx;\n      row.push((_nums$idx = nums[idx++]) !== null && _nums$idx !== void 0 ? _nums$idx : -1);\n    }\n    matrix.push(row);\n  }\n  return matrix;\n}\n\n// Infer wall matrices (1 = wall, 0 = open) from number matrix (numbers only, no image lines)\nfunction inferWalls(numbers) {\n  const m = numbers.length,\n    n = numbers[0].length;\n  const hWalls = Array.from({\n    length: m\n  }, () => Array(n).fill(0));\n  const vWalls = Array.from({\n    length: m\n  }, () => Array(n).fill(0));\n  for (let i = 0; i < m; ++i) {\n    for (let j = 0; j < n - 1; ++j) {\n      // Horizontal: block if either cell is -1\n      if (numbers[i][j] === -1 || numbers[i][j + 1] === -1) hWalls[i][j] = 1;\n    }\n  }\n  for (let j = 0; j < n; ++j) {\n    for (let i = 0; i < m - 1; ++i) {\n      // Vertical: block if either cell is -1\n      if (numbers[i][j] === -1 || numbers[i + 1][j] === -1) vWalls[i][j] = 1;\n    }\n  }\n  return {\n    hWalls,\n    vWalls\n  };\n}\nexport default function ImageUpload({\n  onExtracted\n}) {\n  _s();\n  const fileInput = useRef(null);\n  const [progress, setProgress] = useState('');\n  const [m, setM] = useState('');\n  const [n, setN] = useState('');\n  const handleFile = async file => {\n    setProgress('Running OCR...');\n    const {\n      data\n    } = await Tesseract.recognize(file, 'eng', {\n      logger: m => setProgress(m.status + (m.progress ? ` (${Math.round(m.progress * 100)}%)` : ''))\n    });\n    setProgress('Parsing matrix...');\n    let rows = parseInt(m, 10),\n      cols = parseInt(n, 10);\n    if (!rows || !cols) {\n      setProgress('Please enter matrix size (rows and cols)');\n      return;\n    }\n    const matrix = parseMatrixFromText(data.text, rows, cols);\n    const {\n      hWalls,\n      vWalls\n    } = inferWalls(matrix);\n    setProgress('');\n    onExtracted(matrix, hWalls, vWalls);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginBottom: 18\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Step 1: Upload Puzzle Screenshot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 6\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: m,\n        min: 1,\n        onChange: e => setM(e.target.value),\n        placeholder: \"Rows (m)\",\n        style: {\n          width: 90,\n          marginRight: 6\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: n,\n        min: 1,\n        onChange: e => setN(e.target.value),\n        placeholder: \"Cols (n)\",\n        style: {\n          width: 90,\n          marginRight: 12\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        ref: fileInput,\n        onChange: e => {\n          var _e$target$files;\n          if ((_e$target$files = e.target.files) !== null && _e$target$files !== void 0 && _e$target$files[0]) handleFile(e.target.files[0]);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), progress && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"#1877f2\",\n        margin: \"8px 0\"\n      },\n      children: progress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: \"0.95rem\",\n        color: \"#666\",\n        marginBottom: 8\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Tip:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), \" Crop your screenshot tightly around the grid. After extraction, review & adjust the detected grid below.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(ImageUpload, \"ik6NQ9CuGQtmCHXa9+Nc6ZRO0nI=\");\n_c = ImageUpload;\nvar _c;\n$RefreshReg$(_c, \"ImageUpload\");","map":{"version":3,"names":["React","useRef","useState","Tesseract","jsxDEV","_jsxDEV","parseMatrixFromText","text","m","n","nums","replace","split","filter","Boolean","map","Number","matrix","idx","i","row","j","_nums$idx","push","inferWalls","numbers","length","hWalls","Array","from","fill","vWalls","ImageUpload","onExtracted","_s","fileInput","progress","setProgress","setM","setN","handleFile","file","data","recognize","logger","status","Math","round","rows","parseInt","cols","style","marginBottom","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","min","onChange","e","target","placeholder","width","marginRight","accept","ref","_e$target$files","files","color","margin","fontSize","_c","$RefreshReg$"],"sources":["/Users/shreyashkiranchaudhari/Desktop/Projects/DSA-Zip/Github_Clone_website/Linkedin_Zip_Solver/live-website/src/components/ImageUpload.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport Tesseract from 'tesseract.js';\n\nfunction parseMatrixFromText(text, m, n) {\n  // Remove all non-numeric and non-dash, split by whitespace\n  const nums = text\n    .replace(/[^\\d\\- ]+/g, \" \")\n    .split(/\\s+/)\n    .filter(Boolean)\n    .map(Number);\n  const matrix = [];\n  let idx = 0;\n  for (let i = 0; i < m; ++i) {\n    const row = [];\n    for (let j = 0; j < n; ++j) {\n      row.push(nums[idx++] ?? -1);\n    }\n    matrix.push(row);\n  }\n  return matrix;\n}\n\n// Infer wall matrices (1 = wall, 0 = open) from number matrix (numbers only, no image lines)\nfunction inferWalls(numbers) {\n  const m = numbers.length, n = numbers[0].length;\n  const hWalls = Array.from({ length: m }, () => Array(n).fill(0));\n  const vWalls = Array.from({ length: m }, () => Array(n).fill(0));\n  for (let i = 0; i < m; ++i) {\n    for (let j = 0; j < n - 1; ++j) {\n      // Horizontal: block if either cell is -1\n      if (numbers[i][j] === -1 || numbers[i][j + 1] === -1) hWalls[i][j] = 1;\n    }\n  }\n  for (let j = 0; j < n; ++j) {\n    for (let i = 0; i < m - 1; ++i) {\n      // Vertical: block if either cell is -1\n      if (numbers[i][j] === -1 || numbers[i + 1][j] === -1) vWalls[i][j] = 1;\n    }\n  }\n  return { hWalls, vWalls };\n}\n\nexport default function ImageUpload({ onExtracted }) {\n  const fileInput = useRef(null);\n  const [progress, setProgress] = useState('');\n  const [m, setM] = useState('');\n  const [n, setN] = useState('');\n\n  const handleFile = async (file) => {\n    setProgress('Running OCR...');\n    const { data } = await Tesseract.recognize(file, 'eng', {\n      logger: m => setProgress(m.status + (m.progress ? ` (${Math.round(m.progress * 100)}%)` : '')),\n    });\n    setProgress('Parsing matrix...');\n    let rows = parseInt(m, 10), cols = parseInt(n, 10);\n    if (!rows || !cols) {\n      setProgress('Please enter matrix size (rows and cols)');\n      return;\n    }\n    const matrix = parseMatrixFromText(data.text, rows, cols);\n    const { hWalls, vWalls } = inferWalls(matrix);\n    setProgress('');\n    onExtracted(matrix, hWalls, vWalls);\n  };\n\n  return (\n    <div style={{ marginBottom: 18 }}>\n      <h2>Step 1: Upload Puzzle Screenshot</h2>\n      <div style={{ marginBottom: 6 }}>\n        <input\n          type=\"number\"\n          value={m}\n          min={1}\n          onChange={e => setM(e.target.value)}\n          placeholder=\"Rows (m)\"\n          style={{ width: 90, marginRight: 6 }}\n        />\n        <input\n          type=\"number\"\n          value={n}\n          min={1}\n          onChange={e => setN(e.target.value)}\n          placeholder=\"Cols (n)\"\n          style={{ width: 90, marginRight: 12 }}\n        />\n        <input\n          type=\"file\"\n          accept=\"image/*\"\n          ref={fileInput}\n          onChange={e => {\n            if (e.target.files?.[0]) handleFile(e.target.files[0]);\n          }}\n        />\n      </div>\n      {progress && <div style={{ color: \"#1877f2\", margin: \"8px 0\" }}>{progress}</div>}\n      <div style={{ fontSize: \"0.95rem\", color: \"#666\", marginBottom: 8 }}>\n        <b>Tip:</b> Crop your screenshot tightly around the grid.  \n        After extraction, review & adjust the detected grid below.\n      </div>\n    </div>\n  );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,OAAOC,SAAS,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,SAASC,mBAAmBA,CAACC,IAAI,EAAEC,CAAC,EAAEC,CAAC,EAAE;EACvC;EACA,MAAMC,IAAI,GAAGH,IAAI,CACdI,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC,CAC1BC,KAAK,CAAC,KAAK,CAAC,CACZC,MAAM,CAACC,OAAO,CAAC,CACfC,GAAG,CAACC,MAAM,CAAC;EACd,MAAMC,MAAM,GAAG,EAAE;EACjB,IAAIC,GAAG,GAAG,CAAC;EACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,CAAC,EAAE,EAAEW,CAAC,EAAE;IAC1B,MAAMC,GAAG,GAAG,EAAE;IACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,CAAC,EAAE,EAAEY,CAAC,EAAE;MAAA,IAAAC,SAAA;MAC1BF,GAAG,CAACG,IAAI,EAAAD,SAAA,GAACZ,IAAI,CAACQ,GAAG,EAAE,CAAC,cAAAI,SAAA,cAAAA,SAAA,GAAI,CAAC,CAAC,CAAC;IAC7B;IACAL,MAAM,CAACM,IAAI,CAACH,GAAG,CAAC;EAClB;EACA,OAAOH,MAAM;AACf;;AAEA;AACA,SAASO,UAAUA,CAACC,OAAO,EAAE;EAC3B,MAAMjB,CAAC,GAAGiB,OAAO,CAACC,MAAM;IAAEjB,CAAC,GAAGgB,OAAO,CAAC,CAAC,CAAC,CAACC,MAAM;EAC/C,MAAMC,MAAM,GAAGC,KAAK,CAACC,IAAI,CAAC;IAAEH,MAAM,EAAElB;EAAE,CAAC,EAAE,MAAMoB,KAAK,CAACnB,CAAC,CAAC,CAACqB,IAAI,CAAC,CAAC,CAAC,CAAC;EAChE,MAAMC,MAAM,GAAGH,KAAK,CAACC,IAAI,CAAC;IAAEH,MAAM,EAAElB;EAAE,CAAC,EAAE,MAAMoB,KAAK,CAACnB,CAAC,CAAC,CAACqB,IAAI,CAAC,CAAC,CAAC,CAAC;EAChE,KAAK,IAAIX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,CAAC,EAAE,EAAEW,CAAC,EAAE;IAC1B,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,CAAC,GAAG,CAAC,EAAE,EAAEY,CAAC,EAAE;MAC9B;MACA,IAAII,OAAO,CAACN,CAAC,CAAC,CAACE,CAAC,CAAC,KAAK,CAAC,CAAC,IAAII,OAAO,CAACN,CAAC,CAAC,CAACE,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,EAAEM,MAAM,CAACR,CAAC,CAAC,CAACE,CAAC,CAAC,GAAG,CAAC;IACxE;EACF;EACA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,CAAC,EAAE,EAAEY,CAAC,EAAE;IAC1B,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,CAAC,GAAG,CAAC,EAAE,EAAEW,CAAC,EAAE;MAC9B;MACA,IAAIM,OAAO,CAACN,CAAC,CAAC,CAACE,CAAC,CAAC,KAAK,CAAC,CAAC,IAAII,OAAO,CAACN,CAAC,GAAG,CAAC,CAAC,CAACE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAEU,MAAM,CAACZ,CAAC,CAAC,CAACE,CAAC,CAAC,GAAG,CAAC;IACxE;EACF;EACA,OAAO;IAAEM,MAAM;IAAEI;EAAO,CAAC;AAC3B;AAEA,eAAe,SAASC,WAAWA,CAAC;EAAEC;AAAY,CAAC,EAAE;EAAAC,EAAA;EACnD,MAAMC,SAAS,GAAGlC,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACmC,QAAQ,EAAEC,WAAW,CAAC,GAAGnC,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACM,CAAC,EAAE8B,IAAI,CAAC,GAAGpC,QAAQ,CAAC,EAAE,CAAC;EAC9B,MAAM,CAACO,CAAC,EAAE8B,IAAI,CAAC,GAAGrC,QAAQ,CAAC,EAAE,CAAC;EAE9B,MAAMsC,UAAU,GAAG,MAAOC,IAAI,IAAK;IACjCJ,WAAW,CAAC,gBAAgB,CAAC;IAC7B,MAAM;MAAEK;IAAK,CAAC,GAAG,MAAMvC,SAAS,CAACwC,SAAS,CAACF,IAAI,EAAE,KAAK,EAAE;MACtDG,MAAM,EAAEpC,CAAC,IAAI6B,WAAW,CAAC7B,CAAC,CAACqC,MAAM,IAAIrC,CAAC,CAAC4B,QAAQ,GAAG,KAAKU,IAAI,CAACC,KAAK,CAACvC,CAAC,CAAC4B,QAAQ,GAAG,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC;IAC/F,CAAC,CAAC;IACFC,WAAW,CAAC,mBAAmB,CAAC;IAChC,IAAIW,IAAI,GAAGC,QAAQ,CAACzC,CAAC,EAAE,EAAE,CAAC;MAAE0C,IAAI,GAAGD,QAAQ,CAACxC,CAAC,EAAE,EAAE,CAAC;IAClD,IAAI,CAACuC,IAAI,IAAI,CAACE,IAAI,EAAE;MAClBb,WAAW,CAAC,0CAA0C,CAAC;MACvD;IACF;IACA,MAAMpB,MAAM,GAAGX,mBAAmB,CAACoC,IAAI,CAACnC,IAAI,EAAEyC,IAAI,EAAEE,IAAI,CAAC;IACzD,MAAM;MAAEvB,MAAM;MAAEI;IAAO,CAAC,GAAGP,UAAU,CAACP,MAAM,CAAC;IAC7CoB,WAAW,CAAC,EAAE,CAAC;IACfJ,WAAW,CAAChB,MAAM,EAAEU,MAAM,EAAEI,MAAM,CAAC;EACrC,CAAC;EAED,oBACE1B,OAAA;IAAK8C,KAAK,EAAE;MAAEC,YAAY,EAAE;IAAG,CAAE;IAAAC,QAAA,gBAC/BhD,OAAA;MAAAgD,QAAA,EAAI;IAAgC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzCpD,OAAA;MAAK8C,KAAK,EAAE;QAAEC,YAAY,EAAE;MAAE,CAAE;MAAAC,QAAA,gBAC9BhD,OAAA;QACEqD,IAAI,EAAC,QAAQ;QACbC,KAAK,EAAEnD,CAAE;QACToD,GAAG,EAAE,CAAE;QACPC,QAAQ,EAAEC,CAAC,IAAIxB,IAAI,CAACwB,CAAC,CAACC,MAAM,CAACJ,KAAK,CAAE;QACpCK,WAAW,EAAC,UAAU;QACtBb,KAAK,EAAE;UAAEc,KAAK,EAAE,EAAE;UAAEC,WAAW,EAAE;QAAE;MAAE;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtC,CAAC,eACFpD,OAAA;QACEqD,IAAI,EAAC,QAAQ;QACbC,KAAK,EAAElD,CAAE;QACTmD,GAAG,EAAE,CAAE;QACPC,QAAQ,EAAEC,CAAC,IAAIvB,IAAI,CAACuB,CAAC,CAACC,MAAM,CAACJ,KAAK,CAAE;QACpCK,WAAW,EAAC,UAAU;QACtBb,KAAK,EAAE;UAAEc,KAAK,EAAE,EAAE;UAAEC,WAAW,EAAE;QAAG;MAAE;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvC,CAAC,eACFpD,OAAA;QACEqD,IAAI,EAAC,MAAM;QACXS,MAAM,EAAC,SAAS;QAChBC,GAAG,EAAEjC,SAAU;QACf0B,QAAQ,EAAEC,CAAC,IAAI;UAAA,IAAAO,eAAA;UACb,KAAAA,eAAA,GAAIP,CAAC,CAACC,MAAM,CAACO,KAAK,cAAAD,eAAA,eAAdA,eAAA,CAAiB,CAAC,CAAC,EAAE7B,UAAU,CAACsB,CAAC,CAACC,MAAM,CAACO,KAAK,CAAC,CAAC,CAAC,CAAC;QACxD;MAAE;QAAAhB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,EACLrB,QAAQ,iBAAI/B,OAAA;MAAK8C,KAAK,EAAE;QAAEoB,KAAK,EAAE,SAAS;QAAEC,MAAM,EAAE;MAAQ,CAAE;MAAAnB,QAAA,EAAEjB;IAAQ;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAChFpD,OAAA;MAAK8C,KAAK,EAAE;QAAEsB,QAAQ,EAAE,SAAS;QAAEF,KAAK,EAAE,MAAM;QAAEnB,YAAY,EAAE;MAAE,CAAE;MAAAC,QAAA,gBAClEhD,OAAA;QAAAgD,QAAA,EAAG;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,6GAEb;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACvB,EAAA,CA3DuBF,WAAW;AAAA0C,EAAA,GAAX1C,WAAW;AAAA,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}