{"ast":null,"code":"var _jsxFileName = \"/Users/shreyashkiranchaudhari/Desktop/Projects/DSA-Zip/Github_Clone_website/Linkedin_Zip_Solver/live-website/src/components/ZipVisualizer.js\";\nimport React from \"react\";\n\n// Utility to interpolate between two colors\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction lerpColor(a, b, t) {\n  const ah = parseInt(a.replace(/#/g, \"\"), 16),\n    ar = ah >> 16 & 0xff,\n    ag = ah >> 8 & 0xff,\n    ab = ah & 0xff,\n    bh = parseInt(b.replace(/#/g, \"\"), 16),\n    br = bh >> 16 & 0xff,\n    bg = bh >> 8 & 0xff,\n    bb = bh & 0xff,\n    rr = ar + t * (br - ar),\n    rg = ag + t * (bg - ag),\n    rb = ab + t * (bb - ab);\n  return \"#\" + ((1 << 24) + (rr << 16) + (rg << 8) + rb).toString(16).slice(1);\n}\nexport default function ZipVisualizer({\n  matrix,\n  solution,\n  cellSize = 50\n}) {\n  if (!matrix || !solution || !solution.length) return null;\n  const m = matrix.length,\n    n = matrix[0].length;\n  // Build a quick lookup for order in solution path\n  const posMap = Array.from({\n    length: m\n  }, () => Array(n).fill(-1));\n  solution.forEach(([row, col], idx) => {\n    posMap[row][col] = idx;\n  });\n\n  // Path color gradient\n  const colorStart = \"#1ec7f7\";\n  const colorEnd = \"#0062da\";\n\n  // Calculate SVG path for the solution\n  function getPathD() {\n    return solution.map(([row, col], i) => {\n      const x = col * cellSize + cellSize / 2;\n      const y = row * cellSize + cellSize / 2;\n      return i === 0 ? `M${x},${y}` : `L${x},${y}`;\n    }).join(\" \");\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      overflow: \"auto\",\n      background: \"#fff\",\n      padding: 24,\n      borderRadius: 16\n    },\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: n * cellSize,\n      height: m * cellSize,\n      style: {\n        display: \"block\",\n        background: \"#fff\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n        children: /*#__PURE__*/_jsxDEV(\"linearGradient\", {\n          id: \"path-gradient\",\n          x1: \"0\",\n          y1: \"0\",\n          x2: n * cellSize,\n          y2: m * cellSize,\n          gradientUnits: \"userSpaceOnUse\",\n          children: [/*#__PURE__*/_jsxDEV(\"stop\", {\n            offset: \"0%\",\n            stopColor: colorStart\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"stop\", {\n            offset: \"100%\",\n            stopColor: colorEnd\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n        d: getPathD(),\n        stroke: \"url(#path-gradient)\",\n        strokeWidth: cellSize * 0.7,\n        fill: \"none\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), solution.map(([row, col], i) => {\n        const x = col * cellSize + cellSize / 2;\n        const y = row * cellSize + cellSize / 2;\n        const value = matrix[row][col];\n        const dotColor = \"#111\";\n        const textColor = \"#fff\";\n        return /*#__PURE__*/_jsxDEV(\"g\", {\n          children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: x,\n            cy: y,\n            r: cellSize * 0.28,\n            fill: dotColor,\n            stroke: \"#222\",\n            strokeWidth: 2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this), typeof value === \"number\" && value > 0 && /*#__PURE__*/_jsxDEV(\"text\", {\n            x: x,\n            y: y + 1,\n            textAnchor: \"middle\",\n            dominantBaseline: \"middle\",\n            fill: textColor,\n            fontWeight: \"bold\",\n            fontSize: cellSize * 0.32,\n            style: {\n              fontFamily: \"system-ui, sans-serif\"\n            },\n            children: value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 17\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_c = ZipVisualizer;\nvar _c;\n$RefreshReg$(_c, \"ZipVisualizer\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","lerpColor","a","b","t","ah","parseInt","replace","ar","ag","ab","bh","br","bg","bb","rr","rg","rb","toString","slice","ZipVisualizer","matrix","solution","cellSize","length","m","n","posMap","Array","from","fill","forEach","row","col","idx","colorStart","colorEnd","getPathD","map","i","x","y","join","style","overflow","background","padding","borderRadius","children","width","height","display","id","x1","y1","x2","y2","gradientUnits","offset","stopColor","fileName","_jsxFileName","lineNumber","columnNumber","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","value","dotColor","textColor","cx","cy","r","textAnchor","dominantBaseline","fontWeight","fontSize","fontFamily","_c","$RefreshReg$"],"sources":["/Users/shreyashkiranchaudhari/Desktop/Projects/DSA-Zip/Github_Clone_website/Linkedin_Zip_Solver/live-website/src/components/ZipVisualizer.js"],"sourcesContent":["import React from \"react\";\n\n// Utility to interpolate between two colors\nfunction lerpColor(a, b, t) {\n  const ah = parseInt(a.replace(/#/g, \"\"), 16),\n    ar = (ah >> 16) & 0xff,\n    ag = (ah >> 8) & 0xff,\n    ab = ah & 0xff,\n    bh = parseInt(b.replace(/#/g, \"\"), 16),\n    br = (bh >> 16) & 0xff,\n    bg = (bh >> 8) & 0xff,\n    bb = bh & 0xff,\n    rr = ar + t * (br - ar),\n    rg = ag + t * (bg - ag),\n    rb = ab + t * (bb - ab);\n  return (\n    \"#\" +\n    (\n      (1 << 24) +\n      (rr << 16) +\n      (rg << 8) +\n      rb\n    )\n      .toString(16)\n      .slice(1)\n  );\n}\n\nexport default function ZipVisualizer({ matrix, solution, cellSize = 50 }) {\n  if (!matrix || !solution || !solution.length) return null;\n\n  const m = matrix.length, n = matrix[0].length;\n  // Build a quick lookup for order in solution path\n  const posMap = Array.from({ length: m }, () => Array(n).fill(-1));\n  solution.forEach(([row, col], idx) => {\n    posMap[row][col] = idx;\n  });\n\n  // Path color gradient\n  const colorStart = \"#1ec7f7\";\n  const colorEnd = \"#0062da\";\n\n  // Calculate SVG path for the solution\n  function getPathD() {\n    return solution\n      .map(([row, col], i) => {\n        const x = col * cellSize + cellSize / 2;\n        const y = row * cellSize + cellSize / 2;\n        return i === 0 ? `M${x},${y}` : `L${x},${y}`;\n      })\n      .join(\" \");\n  }\n\n  return (\n    <div style={{ overflow: \"auto\", background: \"#fff\", padding: 24, borderRadius: 16 }}>\n      <svg\n        width={n * cellSize}\n        height={m * cellSize}\n        style={{ display: \"block\", background: \"#fff\" }}\n      >\n        {/* Draw solution path with gradient */}\n        <defs>\n          <linearGradient id=\"path-gradient\" x1=\"0\" y1=\"0\" x2={n * cellSize} y2={m * cellSize} gradientUnits=\"userSpaceOnUse\">\n            <stop offset=\"0%\" stopColor={colorStart} />\n            <stop offset=\"100%\" stopColor={colorEnd} />\n          </linearGradient>\n        </defs>\n        {/* Solution path */}\n        <path\n          d={getPathD()}\n          stroke=\"url(#path-gradient)\"\n          strokeWidth={cellSize * 0.7}\n          fill=\"none\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n        {/* Number dots */}\n        {solution.map(([row, col], i) => {\n          const x = col * cellSize + cellSize / 2;\n          const y = row * cellSize + cellSize / 2;\n          const value = matrix[row][col];\n          const dotColor = \"#111\";\n          const textColor = \"#fff\";\n          return (\n            <g key={i}>\n              <circle\n                cx={x}\n                cy={y}\n                r={cellSize * 0.28}\n                fill={dotColor}\n                stroke=\"#222\"\n                strokeWidth={2}\n              />\n              {typeof value === \"number\" && value > 0 && (\n                <text\n                  x={x}\n                  y={y + 1}\n                  textAnchor=\"middle\"\n                  dominantBaseline=\"middle\"\n                  fill={textColor}\n                  fontWeight=\"bold\"\n                  fontSize={cellSize * 0.32}\n                  style={{\n                    fontFamily: \"system-ui, sans-serif\"\n                  }}\n                >\n                  {value}\n                </text>\n              )}\n            </g>\n          );\n        })}\n      </svg>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}