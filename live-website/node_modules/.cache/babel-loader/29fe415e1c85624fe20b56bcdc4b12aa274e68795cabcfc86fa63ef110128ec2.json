{"ast":null,"code":"var _jsxFileName = \"/Users/shreyashkiranchaudhari/Desktop/Projects/DSA-Zip/Github_Clone_website/Linkedin_Zip_Solver/live-website/src/components/ImageOCRInput.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from \"react\";\nimport Tesseract from \"tesseract.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ImageOCRInput({\n  onMatrixParsed\n}) {\n  _s();\n  const [ocrText, setOcrText] = useState(\"\");\n  const [processing, setProcessing] = useState(false);\n  const fileInput = useRef();\n  async function handleFile(e) {\n    const file = e.target.files[0];\n    if (!file) return;\n    setProcessing(true);\n    setOcrText(\"\");\n    // Run OCR\n    const {\n      data\n    } = await Tesseract.recognize(file, \"eng\", {\n      logger: m => {\n        // Optionally: set progress\n      }\n    });\n    setOcrText(data.text);\n    setProcessing(false);\n  }\n\n  // Parse OCR text to matrix blocks\n  function handleApply() {\n    if (!ocrText.trim()) return;\n    // This expects the OCR text to be in the same format as manual paste: m n, then matrices, blank lines between each.\n    // You may want to allow user to edit before applying.\n    onMatrixParsed(ocrText);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: \"16px 0\",\n      padding: \"16px\",\n      border: \"1px solid #eee\",\n      borderRadius: 8\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Upload Image for OCR\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      ref: fileInput,\n      onChange: handleFile,\n      disabled: processing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), processing && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Processing image\\u2026\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 22\n    }, this), ocrText && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Extracted Text (edit if needed):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        style: {\n          width: \"100%\",\n          minHeight: 100,\n          fontFamily: \"monospace\"\n        },\n        value: ocrText,\n        onChange: e => setOcrText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleApply,\n        children: \"Apply to Puzzle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(ImageOCRInput, \"X+QS0eQWN2POGE+Wcky8PCW12YE=\");\n_c = ImageOCRInput;\nvar _c;\n$RefreshReg$(_c, \"ImageOCRInput\");","map":{"version":3,"names":["React","useRef","useState","Tesseract","jsxDEV","_jsxDEV","ImageOCRInput","onMatrixParsed","_s","ocrText","setOcrText","processing","setProcessing","fileInput","handleFile","e","file","target","files","data","recognize","logger","m","text","handleApply","trim","style","margin","padding","border","borderRadius","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","ref","onChange","disabled","width","minHeight","fontFamily","value","onClick","_c","$RefreshReg$"],"sources":["/Users/shreyashkiranchaudhari/Desktop/Projects/DSA-Zip/Github_Clone_website/Linkedin_Zip_Solver/live-website/src/components/ImageOCRInput.js"],"sourcesContent":["import React, { useRef, useState } from \"react\";\nimport Tesseract from \"tesseract.js\";\n\nexport default function ImageOCRInput({ onMatrixParsed }) {\n  const [ocrText, setOcrText] = useState(\"\");\n  const [processing, setProcessing] = useState(false);\n  const fileInput = useRef();\n\n  async function handleFile(e) {\n    const file = e.target.files[0];\n    if (!file) return;\n    setProcessing(true);\n    setOcrText(\"\");\n    // Run OCR\n    const { data } = await Tesseract.recognize(file, \"eng\", {\n      logger: m => {\n        // Optionally: set progress\n      },\n    });\n    setOcrText(data.text);\n    setProcessing(false);\n  }\n\n  // Parse OCR text to matrix blocks\n  function handleApply() {\n    if (!ocrText.trim()) return;\n    // This expects the OCR text to be in the same format as manual paste: m n, then matrices, blank lines between each.\n    // You may want to allow user to edit before applying.\n    onMatrixParsed(ocrText);\n  }\n\n  return (\n    <div style={{margin: \"16px 0\", padding: \"16px\", border: \"1px solid #eee\", borderRadius: 8}}>\n      <h4>Upload Image for OCR</h4>\n      <input\n        type=\"file\"\n        accept=\"image/*\"\n        ref={fileInput}\n        onChange={handleFile}\n        disabled={processing}\n      />\n      {processing && <div>Processing imageâ€¦</div>}\n      {ocrText && (\n        <div>\n          <h5>Extracted Text (edit if needed):</h5>\n          <textarea\n            style={{width: \"100%\", minHeight: 100, fontFamily: \"monospace\"}}\n            value={ocrText}\n            onChange={e => setOcrText(e.target.value)}\n          />\n          <button onClick={handleApply}>Apply to Puzzle</button>\n        </div>\n      )}\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}