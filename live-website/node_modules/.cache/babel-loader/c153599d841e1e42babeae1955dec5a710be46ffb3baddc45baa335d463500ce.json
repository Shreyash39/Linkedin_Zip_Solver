{"ast":null,"code":"// Ported from your Main.cpp to JS\nfunction clone2D(arr){return arr.map(row=>row.slice());}function checkAllVisited(vis){for(const row of vis)for(const v of row)if(!v)return false;return true;}function isValidMove(curRow,curCol,nxtRow,nxtCol,m,n,vis,hWalls,vWalls,lastNum,newNum,prevRow,prevCol){if(nxtRow<0||nxtRow>=m||nxtCol<0||nxtCol>=n)return false;if(vis[nxtRow][nxtCol])return false;if(nxtRow===prevRow&&nxtCol===prevCol)return false;if(newNum!==-1&&newNum<lastNum)return false;// Right\nif(nxtCol===curCol+1&&(curCol>=n-1||hWalls[curRow][curCol]===1))return false;// Left\nif(nxtCol===curCol-1&&(nxtCol<0||hWalls[curRow][nxtCol]===1))return false;// Down\nif(nxtRow===curRow+1&&(curRow>=m-1||vWalls[curRow][curCol]===1))return false;// Up\nif(nxtRow===curRow-1&&(nxtRow<0||vWalls[nxtRow][curCol]===1))return false;return true;}function solve(mapNums,hWalls,vWalls,path,vis,row,col,lastNum,targetNum,res,pathFound){if(pathFound.found)return;if(mapNums[row][col]===targetNum){if(checkAllVisited(vis)){res.length=0;for(const p of path)res.push([...p]);pathFound.found=true;}if(pathFound.found)return;}const m=mapNums.length,n=mapNums[0].length;let prevRow=-1,prevCol=-1;if(path.length>=2){[prevRow,prevCol]=path[path.length-2];}const dir=[[-1,0],[1,0],[0,-1],[0,1]];for(let d=0;d<4;++d){const[dr,dc]=dir[d];const nr=row+dr,nc=col+dc;const num=nr>=0&&nr<m&&nc>=0&&nc<n?mapNums[nr][nc]:-2;if(isValidMove(row,col,nr,nc,m,n,vis,hWalls,vWalls,lastNum,num,prevRow,prevCol)){vis[nr][nc]=true;path.push([nr,nc]);solve(mapNums,hWalls,vWalls,path,vis,nr,nc,Math.max(lastNum,mapNums[nr][nc]),targetNum,res,pathFound);if(pathFound.found)return;path.pop();vis[nr][nc]=false;}}}// Main export: returns array of [row, col] for path, or [] if no solution\nexport default function solveZipPuzzle(the_map,h_walls,v_walls){const m=the_map.length,n=the_map[0].length;let startRow=-1,startCol=-1,targetNum=0;for(let i=0;i<m;++i)for(let j=0;j<n;++j){if(the_map[i][j]===1){startRow=i;startCol=j;}if(the_map[i][j]!==-1)targetNum=Math.max(targetNum,the_map[i][j]);}if(startRow===-1)throw new Error('Starting point (1) not found in matrix');const vis=Array.from({length:m},()=>Array(n).fill(false));vis[startRow][startCol]=true;const path=[[startRow,startCol]];const res=[];const pathFound={found:false};solve(the_map,h_walls,v_walls,path,vis,startRow,startCol,the_map[startRow][startCol],targetNum,res,pathFound);return pathFound.found?res:[];}","map":{"version":3,"names":["clone2D","arr","map","row","slice","checkAllVisited","vis","v","isValidMove","curRow","curCol","nxtRow","nxtCol","m","n","hWalls","vWalls","lastNum","newNum","prevRow","prevCol","solve","mapNums","path","col","targetNum","res","pathFound","found","length","p","push","dir","d","dr","dc","nr","nc","num","Math","max","pop","solveZipPuzzle","the_map","h_walls","v_walls","startRow","startCol","i","j","Error","Array","from","fill"],"sources":["/Users/shreyashkiranchaudhari/Desktop/Projects/DSA-Zip/Github_Clone_website/Linkedin_Zip_Solver/live-website/src/solver.js"],"sourcesContent":["// Ported from your Main.cpp to JS\nfunction clone2D(arr) {\n  return arr.map(row => row.slice());\n}\n\nfunction checkAllVisited(vis) {\n  for (const row of vis) for (const v of row) if (!v) return false;\n  return true;\n}\n\nfunction isValidMove(curRow, curCol, nxtRow, nxtCol, m, n, vis, hWalls, vWalls, lastNum, newNum, prevRow, prevCol) {\n  if (nxtRow < 0 || nxtRow >= m || nxtCol < 0 || nxtCol >= n) return false;\n  if (vis[nxtRow][nxtCol]) return false;\n  if (nxtRow === prevRow && nxtCol === prevCol) return false;\n  if (newNum !== -1 && newNum < lastNum) return false;\n  // Right\n  if (nxtCol === curCol + 1 && (curCol >= n - 1 || hWalls[curRow][curCol] === 1)) return false;\n  // Left\n  if (nxtCol === curCol - 1 && (nxtCol < 0 || hWalls[curRow][nxtCol] === 1)) return false;\n  // Down\n  if (nxtRow === curRow + 1 && (curRow >= m - 1 || vWalls[curRow][curCol] === 1)) return false;\n  // Up\n  if (nxtRow === curRow - 1 && (nxtRow < 0 || vWalls[nxtRow][curCol] === 1)) return false;\n  return true;\n}\n\nfunction solve(mapNums, hWalls, vWalls, path, vis, row, col, lastNum, targetNum, res, pathFound) {\n  if (pathFound.found) return;\n  if (mapNums[row][col] === targetNum) {\n    if (checkAllVisited(vis)) {\n      res.length = 0;\n      for (const p of path) res.push([...p]);\n      pathFound.found = true;\n    }\n    if (pathFound.found) return;\n  }\n  const m = mapNums.length, n = mapNums[0].length;\n  let prevRow = -1, prevCol = -1;\n  if (path.length >= 2) {\n    [prevRow, prevCol] = path[path.length - 2];\n  }\n  const dir = [\n    [-1, 0], [1, 0], [0, -1], [0, 1]\n  ];\n  for (let d = 0; d < 4; ++d) {\n    const [dr, dc] = dir[d];\n    const nr = row + dr, nc = col + dc;\n    const num = (nr >= 0 && nr < m && nc >= 0 && nc < n) ? mapNums[nr][nc] : -2;\n    if (\n      isValidMove(row, col, nr, nc, m, n, vis, hWalls, vWalls, lastNum, num, prevRow, prevCol)\n    ) {\n      vis[nr][nc] = true;\n      path.push([nr, nc]);\n      solve(mapNums, hWalls, vWalls, path, vis, nr, nc, Math.max(lastNum, mapNums[nr][nc]), targetNum, res, pathFound);\n      if (pathFound.found) return;\n      path.pop();\n      vis[nr][nc] = false;\n    }\n  }\n}\n\n// Main export: returns array of [row, col] for path, or [] if no solution\nexport default function solveZipPuzzle(the_map, h_walls, v_walls) {\n  const m = the_map.length, n = the_map[0].length;\n  let startRow = -1, startCol = -1, targetNum = 0;\n  for (let i = 0; i < m; ++i)\n    for (let j = 0; j < n; ++j) {\n      if (the_map[i][j] === 1) { startRow = i; startCol = j; }\n      if (the_map[i][j] !== -1) targetNum = Math.max(targetNum, the_map[i][j]);\n    }\n  if (startRow === -1) throw new Error('Starting point (1) not found in matrix');\n  const vis = Array.from({ length: m }, () => Array(n).fill(false));\n  vis[startRow][startCol] = true;\n  const path = [[startRow, startCol]];\n  const res = [];\n  const pathFound = { found: false };\n  solve(the_map, h_walls, v_walls, path, vis, startRow, startCol, the_map[startRow][startCol], targetNum, res, pathFound);\n  return pathFound.found ? res : [];\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}