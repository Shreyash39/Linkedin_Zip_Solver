{"ast":null,"code":"var _jsxFileName = \"/Users/shreyashkiranchaudhari/Desktop/Projects/DSA-Zip/Github_Clone_website/Linkedin_Zip_Solver/live-website/src/components/MatrixInput.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MatrixInput({\n  matrix,\n  setMatrix,\n  hWalls,\n  setHWalls,\n  vWalls,\n  setVWalls,\n  rows,\n  cols\n}) {\n  // Helper to update a value in a 2D array immutably\n  function update2D(arr, r, c, val) {\n    return arr.map((row, i) => i === r ? row.map((cell, j) => j === c ? val : cell) : row);\n  }\n\n  // Handle number input (matrix)\n  function handleMatrixChange(r, c, val) {\n    let numVal = val === \"\" ? -1 : parseInt(val, 10);\n    if (isNaN(numVal)) numVal = -1;\n    setMatrix(update2D(matrix, r, c, numVal));\n  }\n\n  // Handle horizontal wall input\n  function handleHWallsChange(r, c, val) {\n    let numVal = val === \"\" ? 0 : parseInt(val, 10);\n    if (isNaN(numVal) || numVal !== 1) numVal = 0;\n    setHWalls(update2D(hWalls, r, c, numVal));\n  }\n\n  // Handle vertical wall input\n  function handleVWallsChange(r, c, val) {\n    let numVal = val === \"\" ? 0 : parseInt(val, 10);\n    if (isNaN(numVal) || numVal !== 1) numVal = 0;\n    setVWalls(update2D(vWalls, r, c, numVal));\n  }\n\n  // Render a 2D input grid\n  function renderGrid(arr, onChange, placeholder = \"\", min = undefined, max = undefined) {\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: arr.map((row, r) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((cell, c) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              style: {\n                width: \"2.5em\",\n                textAlign: \"center\"\n              },\n              type: \"number\",\n              value: cell === -1 ? \"\" : cell,\n              min: min,\n              max: max,\n              placeholder: placeholder,\n              onChange: e => onChange(r, c, e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 19\n            }, this)\n          }, c, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 17\n          }, this))\n        }, r, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Numbers Matrix (use -1 for blank)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), renderGrid(matrix, handleMatrixChange, \"-1 = blank\"), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Horizontal Walls (1=block, 0=open)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), renderGrid(hWalls, handleHWallsChange, \"0/1\", 0, 1), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Vertical Walls (1=block, 0=open)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), renderGrid(vWalls, handleVWallsChange, \"0/1\", 0, 1)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_c = MatrixInput;\nvar _c;\n$RefreshReg$(_c, \"MatrixInput\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","MatrixInput","matrix","setMatrix","hWalls","setHWalls","vWalls","setVWalls","rows","cols","update2D","arr","r","c","val","map","row","i","cell","j","handleMatrixChange","numVal","parseInt","isNaN","handleHWallsChange","handleVWallsChange","renderGrid","onChange","placeholder","min","undefined","max","children","style","width","textAlign","type","value","e","target","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shreyashkiranchaudhari/Desktop/Projects/DSA-Zip/Github_Clone_website/Linkedin_Zip_Solver/live-website/src/components/MatrixInput.js"],"sourcesContent":["import React from \"react\";\n\nexport default function MatrixInput({\n  matrix, setMatrix,\n  hWalls, setHWalls,\n  vWalls, setVWalls,\n  rows, cols\n}) {\n  // Helper to update a value in a 2D array immutably\n  function update2D(arr, r, c, val) {\n    return arr.map((row, i) =>\n      i === r ? row.map((cell, j) => (j === c ? val : cell)) : row\n    );\n  }\n\n  // Handle number input (matrix)\n  function handleMatrixChange(r, c, val) {\n    let numVal = val === \"\" ? -1 : parseInt(val, 10);\n    if (isNaN(numVal)) numVal = -1;\n    setMatrix(update2D(matrix, r, c, numVal));\n  }\n\n  // Handle horizontal wall input\n  function handleHWallsChange(r, c, val) {\n    let numVal = val === \"\" ? 0 : parseInt(val, 10);\n    if (isNaN(numVal) || numVal !== 1) numVal = 0;\n    setHWalls(update2D(hWalls, r, c, numVal));\n  }\n\n  // Handle vertical wall input\n  function handleVWallsChange(r, c, val) {\n    let numVal = val === \"\" ? 0 : parseInt(val, 10);\n    if (isNaN(numVal) || numVal !== 1) numVal = 0;\n    setVWalls(update2D(vWalls, r, c, numVal));\n  }\n\n  // Render a 2D input grid\n  function renderGrid(arr, onChange, placeholder = \"\", min = undefined, max = undefined) {\n    return (\n      <table>\n        <tbody>\n          {arr.map((row, r) => (\n            <tr key={r}>\n              {row.map((cell, c) => (\n                <td key={c}>\n                  <input\n                    style={{ width: \"2.5em\", textAlign: \"center\" }}\n                    type=\"number\"\n                    value={cell === -1 ? \"\" : cell}\n                    min={min}\n                    max={max}\n                    placeholder={placeholder}\n                    onChange={e => onChange(r, c, e.target.value)}\n                  />\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n\n  return (\n    <div>\n      <h3>Numbers Matrix (use -1 for blank)</h3>\n      {renderGrid(matrix, handleMatrixChange, \"-1 = blank\")}\n\n      <h4>Horizontal Walls (1=block, 0=open)</h4>\n      {renderGrid(hWalls, handleHWallsChange, \"0/1\", 0, 1)}\n\n      <h4>Vertical Walls (1=block, 0=open)</h4>\n      {renderGrid(vWalls, handleVWallsChange, \"0/1\", 0, 1)}\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}